#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_EXPR_SIZE 100

int precedence(char operator) {
    switch (operator) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

void infixToPostfix(char infix[], char postfix[]) {
    int len = strlen(infix);
    char stack[MAX_EXPR_SIZE];
    int top = -1;
    int j = 0;

    for (int i = 0; i < len; i++) {
        if (infix[i] == ' ' || infix[i] == '\t')
            continue;

        if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            stack[++top] = infix[i];
        } else if (infix[i] == ')') {
            while (top > -1 && stack[top] != '(') {
                postfix[j++] = stack[top--];
            }
            if (top > -1 && stack[top] == '(') {
                top--;
            } else {
                printf("Invalid Expression\n");
                return;
            }
        } else if (isOperator(infix[i])) {
            while (top > -1 && precedence(stack[top]) >= precedence(infix[i])) {
                postfix[j++] = stack[top--];
            }
            stack[++top] = infix[i];
        }
    }

    while (top > -1) {
        if (stack[top] == '(' || stack[top] == ')') {
            printf("Invalid Expression\n");
            return;
        }
        postfix[j++] = stack[top--];
    }

    postfix[j] = '\0';
}

void reverseString(char str[]) {
    int length = strlen(str);
    int i, j;
    char temp;
    for (i = 0, j = length - 1; i < j; i++, j--) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
}

void infixToPrefix(char infix[], char prefix[]) {
    int len = strlen(infix);
    char stack[MAX_EXPR_SIZE];
    int top = -1;
    int j = 0;

    reverseString(infix);

    for (int i = 0; i < len; i++) {
        if (infix[i] == ' ' || infix[i] == '\t')
            continue;

        if (isalnum(infix[i])) {
            prefix[j++] = infix[i];
        } else if (infix[i] == ')') {
            stack[++top] = infix[i];
        } else if (infix[i] == '(') {
            while (top > -1 && stack[top] != ')') {
                prefix[j++] = stack[top--];
            }
            if (top > -1 && stack[top] == ')') {
                top--;
            } else {
                printf("Invalid Expression\n");
                return;
            }
        } else if (isOperator(infix[i])) {
            while (top > -1 && precedence(stack[top]) > precedence(infix[i])) {
                prefix[j++] = stack[top--];
            }
            stack[++top] = infix[i];
        }
    }

    while (top > -1) {
        if (stack[top] == '(' || stack[top] == ')') {
            printf("Invalid Expression\n");
            return;
        }
        prefix[j++] = stack[top--];
    }

    prefix[j] = '\0';
    reverseString(prefix);
}

int main() {
    char infix[MAX_EXPR_SIZE] = "a+b*(c^d-e)^(f+g*h)-i";
    char postfix[MAX_EXPR_SIZE];
    char prefix[MAX_EXPR_SIZE];
    infixToPostfix(infix, postfix);
    printf("Postfix Expression: %s\n", postfix);
    infixToPrefix(infix, prefix);
    printf("Prefix Expression: %s\n", prefix);

    return 0;
}
